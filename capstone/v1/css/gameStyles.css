@import url(./base.css);

* {
    box-sizing: border-box;
    /* Devdocs says when this set, height property then determines the height of the border area as opposed to content area  */
    margin: 0;
    padding: 0;
}

html {
    height: 100vh;
    max-height: 100vh !important;
    background-image: var(--bg0);
}

.gameContainer {
    display: flex;
    height: 90vh;
    /* Want to ensure gameContainer does not extend beyond viewing window, otherwise arrow key presses trigger unwanted scrolling behavior */
    position: absolute;
    width: 100vw;
    top: 8%;
    transform-style: preserve-3d;
}

.gameContainer>* {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

#parent {
    /* parent used as layer of separation, when tesseract was getting the flex-basis value, could not override that value with JS by specifying a width on the element.style property */
    /* Can change this one value, flex basis and the whole framework responds appropriately */
    flex-basis: 70%;
    max-width: 600px;
    /* max-width: 70vw;  */
    /* max-height: 90vh; ; */
    transform-style: preserve-3d;
    position: relative;
}

#tesseract {
    /* No explicit width set */
    background-color: #740d2242 !important;
    background-size: cover;
    transform-style: preserve-3d;
    position: absolute;
}

.spacer {
    flex-basis: 25%;
    flex-grow: 1;
    transform-style: preserve-3d;
}

.spacerLeft {
    background: url(../images//frameLeft.png) right top no-repeat;
    background-size: contain;
    display: none;
}

.spacerRight {
    background: url(../images//frameRight.png) left top no-repeat;
    background-size: contain;
    display: none;
}

.axis {
    display: grid;
    position: absolute;
    transform-style: preserve-3d;
}

.plane {
    display: grid;
    position: absolute;
    transition-property: all;
    transition-duration: 250ms;
    border: none;
}

.face {
    border: 1px solid black;
    transition-property: all;
    /*only impacts keystone shifts*/
    transition-duration: 200ms;
}

.keyStone {
    box-shadow: inset 2px 2px 5px 2px rgba(59, 31, 31, 0.5), inset -2px -2px 5px 2px rgba(250, 250, 250, 0.5);
    border: 1px solid var(--paletteGold) !important;
}

.directions {
    background: url(../images//directions.png) center center no-repeat;
    background-size: contain;
    grid-area: 1/1/-1/-1;
    opacity: 100%;
    /*Uses opacity to enable transition capabilities*/
    transition-property: all;
    transition-duration: 500ms;
}

.hidden {
    opacity: 0 !important;
}

#tesseract .z .plane:first-child {
    background-image: var(--gradient6);
}

.almost {
    width: 100%;
    height: 100%;
    background: var(--almost) !important;
    opacity: 0;
}

.locked {
    border: 2px solid white !important;
    outline: 2px solid black !important;
}

.violated {
    background-color: rgba(200, 0, 0, 0.6) !important;
    border: 1px solid black;
}

.violatedShape {
    background-image: var(--violated) !important;
    border: 3px solid var(--paletteRed) !important;
}

.shadow {
    opacity: 0.3 !important;
    border: 1px solid lightgray;

}

/* CONTROL PAD STYLES */
.controls {
    width: 210px;
    height: 210px;
    position: absolute;
    display: grid;
    grid-template-rows: repeat(3, 1fr);
    grid-template-columns: repeat(3, 1fr);
    transform-style: preserve-3d;
    border-radius: 25px;
    right: 35px;
    bottom: 35px;
}

.controls * {
    transition-property: background-color;
    transition-duration: 150ms;
}

.padButton {
    transform-style: preserve-3d;
    position: relative;
    z-index: 50;
}

.translate {
    position: absolute;
    width: 100%;
    height: 100%;
}

.backTranslate {
    background: url(../images//redButton.png) center top no-repeat;
}

.frontTranslate {
    background: url(../images//redButton.png) center top no-repeat;
    transform: rotateZ(180deg);
}

.leftTranslate {
    background: url(../images//blueButton.png) center top no-repeat;
    transform: rotateZ(-90deg);
}

.rightTranslate {
    background: url(../images//blueButton.png) center top no-repeat;
    transform: rotateZ(90deg);
}

.two {
    background: rgb(255, 237, 237);
    border: 2px solid black;
    border-top-left-radius: 15px;
    border-top-right-radius: 15px;
    box-shadow: inset 5px 5px 5px 2px var(--paletteRed), inset -5px -5px 5px 2px var(--paletteRed);
    height: calc(100% + 15px);
    top: -14px;
}

.four {
    background-color: rgb(233, 250, 255);
    border: 2px solid black;
    border-top-left-radius: 15px;
    border-bottom-left-radius: 15px;
    box-shadow: inset 5px 5px 5px 2px var(--paletteBlue), inset -5px -5px 5px 2px var(--paletteBlue);
    width: calc(100% + 15px);
    left: -15px;
}

.six {
    background-color: rgb(233, 250, 255);
    box-shadow: inset 5px 5px 5px 2px var(--paletteBlue), inset -5px -5px 5px 2px var(--paletteBlue);
    border: 2px solid black;
    border-top-right-radius: 15px;
    border-bottom-right-radius: 15px;
    width: calc(100% + 15px);
}

.seven {
    border-bottom-left-radius: 15px;
    right: 5px;
    top: 5px;
}

.eight {
    background-color: rgb(255, 237, 237) !important;
    box-shadow: inset 5px 5px 5px 2px var(--paletteRed), inset -5px -5px 5px 2px var(--paletteRed);
    border: 2px solid black;
    border-bottom-left-radius: 15px;
    border-bottom-right-radius: 15px;
    height: calc(100% + 15px);
}

.translateDown {
    background: url(../images//redButton.png) center top no-repeat;
}

.nine {
    border-bottom-right-radius: 15px;
    top: 5px;
    left: 5px;
}

.ten {
    border: 1px solid;
    background: conic-gradient(from 45deg, var(--paletteBlue) 90deg, var(--paletteRed) 90deg 180deg, var(--paletteBlue) 180deg 270deg, var(--paletteRed) 270deg);
    position: absolute;
    grid-area: 2/2/3/3;
    z-index: 195;
    width: 100%;
    height: 100%;
}

.eleven {
    border-top: 2px solid;
    border-bottom: 2px solid;
    background: linear-gradient(to right, var(--paletteBlue), rgb(233, 250, 255), var(--paletteBlue));
    position: absolute;
    grid-area: 2/2/3/3;
    z-index: 194;
    width: calc(100% + 30px);
    height: 100%;
    left: -15px;
}

.five {
    grid-area: 2/2/3/3;
    position: relative;
    transform-style: preserve-3d;
    width: 100%;
    height: 100%;
    transform-origin: center center;
    transform: translateZ(150px) rotateX(-20deg) rotateY(15deg);
    border: none !important;
    z-index: 200;
}

.indexCube {
    position: absolute;
    transform-style: preserve-3d;
    width: 100%;
    height: 100%;
}

.indexFace {
    transform-style: preserve-3d;
    position: absolute;
    width: 100%;
    height: 100%;
    border: 1px solid white;
}

.front {
    transform: translateZ(35px);
    background-color: var(--paletteRed);
}

.back {
    transform: rotateY(180deg) translateZ(35px);
    background-color: var(--paletteRed);
}

.left {
    transform: rotateY(-90deg) translateZ(35px);
    background-color: var(--paletteBlue);
}

.right {
    transform: rotateY(90deg) translateZ(35px);
    background-color: var(--paletteBlue);
}

.top {
    transform: rotateX(90deg) translateZ(35px);
    background-color: lemonchiffon;
}

.bottom {
    transform: rotateX(-90deg) translateZ(35px);
    background-color: lemonchiffon;
}

.arrow,
.rotator {
    position: absolute;
    height: 100%;
    width: 100%;
    transform-style: preserve-3d;
}

.frontArrow {
    background: url(../images//redArrow3.png) 50% 50% no-repeat;
    transform: rotateY(90deg) translateX(-70px) rotateX(90deg);
}

.backArrow {
    background: url(../images//redArrow3.png) 50% 50% no-repeat;
    transform: rotateY(-90deg) translateX(-70px) translateY(-20px) rotateX(90deg);
}

.leftArrow {
    background: url(../images//blueArrow3.png) 50% 50% no-repeat;
    transform: translateX(-50px);
}

.rightArrow {
    background: url(../images//blueArrow3.png) 50% 50% no-repeat;
    transform: rotateY(180deg) translateX(-50px);
}

.activeFace {
    background-color: rgba(0, 255, 0, 0.7) !important;
}

.inactiveFace {
    background-color: lightslategray !important;
}

.activeArrow {
    background: url(../images//greenArrow2.png) 50% 50% no-repeat !important;
}

.rotationArrowleft {
    background: url(../images//blueRotate2.png) 50% 50% no-repeat;
    transform: translateX(-50px) translateY(-30px) rotateZ(90deg);
}

.rotationArrowright {
    background: url(../images//blueRotate2.png) 50% 50% no-repeat;
    transform: translateX(50px) translateY(-30px) rotateY(180deg) rotateZ(90deg);
}

.rotationArrowdown {
    background: url(../images//redRotate2.png) 50% 50% no-repeat;
    transform: rotateY(90deg) translateY(50px) translateX(-30px);
}

.rotationArrowup {
    background: url(../images//redRotate2.png) 50% 50% no-repeat;
    transform: rotateZ(-180deg) rotateY(90deg) translateY(50px) translateX(-30px);
}

.activeRotator {
    background: url(../images//greenRotate2.png) 50% 50% no-repeat !important;
}

.activeClockwise {
    background: url(../images//greenClockwise.png) no-repeat !important;
}

.animatable {
    /* Did as separate class here so I could take off transition for resetting transform instantly */
    transition-property: transform;
    transition-duration: 300ms;
    transition-timing-function: ease-out;
}

.rotationArrowClockwise,
.rotationArrowCounter {
    position: absolute;
    background: url(../images//counterCW.png) no-repeat;
    width: 72px;
    height: 72px;
    z-index: 75;
}

.rotationArrowCounter {
    transform: translateZ(150px) rotateX(60deg) rotateZ(20deg);
    grid-area: 3/1/4/2;
    border-bottom-left-radius: 15px;
}

.rotationArrowClockwise {
    transform: translateZ(150px) rotateX(60deg) rotateZ(20deg) rotateY(180deg);
    grid-area: 3/3/4/4;
}

.commandButton {
    /* LEFT THESE 2 STYLES IN SO I COULD TURN THEM BACK ON FOR DEMONSTRATION OF TOUCH FUNCTIONALITY */
    /* background-color: aqua;  */
    /* opacity: 0.5;  */
    position: absolute;
    width: 120%;
    height: 120%;
    left: -10%;
    top: -10%;
    transform-style: preserve-3d;
    transform: translateZ(1000px);
}

.command7,
.command9 {
    width: 110%;
    height: 110%;
    top: 2%;
    transform: translateZ(900px);
}

.command9 {
    left: 0%;
}

.pressedLeft,
.pressedUp,
.pressedClock {
    transition-property: all;
    transition-duration: 200ms;
    transform: scale(0.85);
    z-index: 25 !important;
}

.pressedLeft {
    outline: 14px solid var(--paletteBlue);
}

.pressedUp {
    outline: 14px solid var(--paletteRed);
}

.pressedClock {
    outline: 14px solid var(--paletteGold);
}

.zRot {
    background-color: lemonchiffon;
    box-shadow: inset 5px 5px 5px 2px var(--paletteGold), inset -5px -5px 5px 2px var(--paletteGold);
}


/* OPTION BUTTON styles */
.options {
    width: 76px;
    position: absolute;
    left: 25px;
    bottom: 20px;
    transform-style: preserve-3d;
}

.optionBtn {
    display: flex;
    justify-content: center;
    height: 70px;
    width: 75px;
    background: var(--gradient7);
    border-radius: 15px;
    border: 2px solid;
    position: relative;
}

.optionBtn img {
    height: 64px;
    align-self: center;
}

.pause {
    margin: 15px 0;
}

.hidden2 {
    display: none;
}

/* SHAPE QUEUE STYLES */
.shapeQueue {
    width: 240px;
    height: 360px;
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    transform-style: preserve-3d;
}

.dropdown-header {
    background: var(--paletteRedGradient);
}

.toast-header {
    background: var(--paletteGoldGradient);
}

.dropdown-menu.show {
    margin-left: 10px !important;
    transform-style: preserve-3d;
    background-color: rgba(245, 245, 245, 0.72);
    overflow: hidden;
}

.miniFrameParent1 {
    width: 96px;
    height: 96px;
    align-self: center;
    transform-style: preserve-3d;
}

.miniFrame {
    transform-style: preserve-3d;
    animation: spin 6s linear infinite;
}

.miniFrame .plane {
    background-color: rgba(0, 0, 0, 0.05) !important;
}

@keyframes spin {
    0% {
        transform: rotateX(-20deg) rotateY(0deg);
    }

    100% {
        transform: rotateX(-20deg) rotateY(360deg);
    }
}

/* TOAST STYLES */
.toast {
    width: 80px;
}


/* Game over Styles */
.finished {
    background-image: none !important;
}

/* for vertical spacing on smaller screens */
@media only screen and (max-width: 481px) {
    .gameContainer {
        height: calc(100vh - 210px);
        top: 0;
    }
}